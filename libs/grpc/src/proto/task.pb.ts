// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: task.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "./google/protobuf/timestamp.pb";

export const protobufPackage = "task";

export interface Empty {
}

export interface Id {
  id: string;
}

export interface GetTasksDTO {
  userId: string;
  cursor?: string | undefined;
  limit?: number | undefined;
}

export interface GetTasksPagination {
  cursor?: string | undefined;
  hasNext: boolean;
  tasks: Task[];
}

export interface CreateTaskDTO {
  title: string;
  content: string;
  authorId: string;
}

export interface UpdateTaskDTO {
  id: string;
  title: string;
  content: string;
}

export interface Task {
  id: string;
  title: string;
  content: string;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export interface Tasks {
  tasks: Task[];
}

export const TASK_PACKAGE_NAME = "task";

export interface TaskServiceClient {
  getTask(request: Id): Observable<Task>;

  getTasks(request: GetTasksDTO): Observable<GetTasksPagination>;

  deleteTask(request: Id): Observable<Task>;

  createTask(request: CreateTaskDTO): Observable<Tasks>;

  updateTask(request: UpdateTaskDTO): Observable<Tasks>;
}

export interface TaskServiceController {
  getTask(request: Id): Promise<Task> | Observable<Task> | Task;

  getTasks(request: GetTasksDTO): Promise<GetTasksPagination> | Observable<GetTasksPagination> | GetTasksPagination;

  deleteTask(request: Id): Promise<Task> | Observable<Task> | Task;

  createTask(request: CreateTaskDTO): Promise<Tasks> | Observable<Tasks> | Tasks;

  updateTask(request: UpdateTaskDTO): Promise<Tasks> | Observable<Tasks> | Tasks;
}

export function TaskServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getTask", "getTasks", "deleteTask", "createTask", "updateTask"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("TaskService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("TaskService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TASK_SERVICE_NAME = "TaskService";
